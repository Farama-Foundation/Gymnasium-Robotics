__author__ = "Feng Gu"
__email__ = "contact@fenggu.me"

"""
   isort:skip_file
"""

import os
import re

from tqdm import tqdm
from utils import trim
from itertools import chain

pattern = re.compile(r"(?<!^)(?=[A-Z])")

readme_path = os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
    "README.md",
)

fetch_path = os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
    "gymnasium_robotics",
    "envs",
    "fetch",
)

hand_path = os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
    "gymnasium_robotics",
    "envs",
    "hand",
)

output_path = os.path.join(
    os.path.dirname(os.path.dirname(__file__)),
    "envs",
)

# for gen envs/index.md
index_texts = """---
firstpage:
lastpage:
---
"""
env_index_toctree = """
```{toctree}
:hidden:
"""

# regex to find the class name
class_p = re.compile(r"class\s([\w]+)\(.*")

# write to file
def generate(name, docstring, type):
    output = os.path.join(output_path, type, name + ".md")
    front_matter = f"""---
autogenerated:
title: {name}
---
"""
    title = f"# {name}"
    if docstring is None:
        docstring = "No information provided"
    all_text = f"""{front_matter}
{title}
{docstring}
                """

    with open(output, "w") as f:
        f.write(all_text)
        f.close()


# generate markdown for envs
for (root, dirs, file) in tqdm(chain(os.walk(fetch_path), os.walk(hand_path))):
    for f in file:
        # skip __init__.py and __pycache__
        if not f.endswith(".py") or f.startswith("__"):
            continue
        else:
            type = "fetch" if "fetch" in root else "hand"
            curr_path = os.path.join(root, f)
            curr_file = open(curr_path, "r")
            lines = curr_file.readlines()
            docstrings = {}
            docstring = ""
            curr_class = ""
            match = False

            for trimmed in lines:
                # remove leading whitespace
                # trimmed = line.lstrip()

                if trimmed.startswith("class"):
                    class_name = re.search(class_p, trimmed).group(1)
                    # ignore Py classes and remove the "Mujoco" suffix
                    if "Py" not in class_name:
                        curr_class = class_name[:-3]
                        if curr_class.startswith("Mujoco"):
                            curr_class = curr_class[6:]

                if trimmed.startswith('"""'):
                    match = not match

                # if we are in a docstring
                if match:
                    if trimmed.startswith('"""'):
                        trimmed = trimmed[3:]
                    docstring += trimmed
                # populating the dict
                else:
                    if len(docstring) > 0:
                        if len(curr_class) > 0:
                            docstrings[curr_class] = docstring
                        docstring = ""
                        curr_class = ""

            # write to file
            for name, docstring in docstrings.items():
                snake_env_name = pattern.sub("_", name).lower()
                title_env_name = snake_env_name.replace("_", " ").title()
                generate(title_env_name, docstring, type)
                env_index_toctree += f"{type}/{title_env_name}\n"

env_index_toctree += """\n```\n"""

env_path = os.path.join(
    os.path.dirname(os.path.dirname(__file__)),
    "envs",
    "index.md",
)

with open(readme_path) as f:
    readme = f.read()
    sections = readme.split("<br>")


with open(env_path, "w") as f:
    index_texts += sections[2]
    f.write(index_texts + env_index_toctree)
    f.close()
